#include <linux/module.h>
#include <linux/kernel.h>
#include <linux/usb.h>
#include <linux/fs.h>
#include <linux/dcache.h>
#include <linux/namei.h>
#include <linux/mount.h>
#include <linux/path.h>

// Função para listar arquivos no diretório
static void listar_arquivos(const char *path) {
    struct path dir_path;
    struct file *filp;
    struct dir_context ctx;

    printk(KERN_INFO "[*] Luiz: Listando arquivos em: %s\n", path);

    // Obtemos o caminho para o diretório
    if (kern_path(path, LOOKUP_FOLLOW, &dir_path)) {
        printk(KERN_ERR "[*] Luiz: Caminho não encontrado: %s\n", path);
        return;
    }

    // Tentando abrir o diretório
    filp = d_open(&dir_path, O_RDONLY, NULL);
    if (IS_ERR(filp)) {
        printk(KERN_ERR "[*] Luiz: Falha ao abrir diretório: %ld\n", PTR_ERR(filp));
        return;
    }

    // Inicializamos o contexto para leitura
    memset(&ctx, 0, sizeof(struct dir_context));
    ctx.actor = (void *)printk;  // Aqui você pode usar uma função customizada para mostrar os arquivos

    // Iterando sobre os arquivos
    vfs_readdir(filp, &ctx);

    filp_close(filp, NULL);
}

// Função probe
static int pen_probe(struct usb_interface *interface, const struct usb_device_id *id) {
    printk(KERN_INFO "[*] Luiz: O pendrive (%04X:%04X) conectado\n", id->idVendor, id->idProduct);

    // Vamos listar os arquivos no diretório onde o pendrive foi montado
    listar_arquivos("/media/pendrive");

    return 0; // Retornar 0 indica que gerenciaremos este dispositivo
}

// Função disconnect
static void pen_disconnect(struct usb_interface *interface) {
    printk(KERN_INFO "[*] Luiz: Pendrive removido\n");
}

// Tabela de IDs suportados
static struct usb_device_id pen_table[] = {
    { USB_DEVICE(0x0781, 0x5571) }, // Substitua pelos IDs corretos (lsusb)
    {} // Termina a lista
};
MODULE_DEVICE_TABLE(usb, pen_table);

// Estrutura usb_driver
static struct usb_driver pen_driver = {
    .name = "Luiz-USB",
    .id_table = pen_table,
    .probe = pen_probe,
    .disconnect = pen_disconnect,
};

// Inicialização do driver
static int __init pen_init(void) {
    int ret = -1;
    printk(KERN_INFO "[*] Luiz: Construtor do driver\n");
    printk(KERN_INFO "\tRegistrando driver com o kernel\n");
    ret = usb_register(&pen_driver);
    if (ret == 0) {
        printk(KERN_INFO "\tRegistro concluído\n");
    } else {
        printk(KERN_ERR "\tFalha ao registrar driver\n");
    }
    return ret;
}

// Finalização do driver
static void __exit pen_exit(void) {
    printk(KERN_INFO "[*] Luiz: Destrutor do driver\n");
    usb_deregister(&pen_driver);
    printk(KERN_INFO "\tDesregistro completo!\n");
}

module_init(pen_init);
module_exit(pen_exit);

MODULE_LICENSE("GPL");
MODULE_AUTHOR("LUIZ");
MODULE_DESCRIPTION("Driver de registro de pendrive USB");
